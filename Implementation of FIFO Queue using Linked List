import java.util.Scanner;

// Node class for the linked list
class Node {
    int data; // Data to be stored
    Node next; // Pointer to the next node in the list

    // Constructor to initialize the node
    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

// Queue class using linked list
class Queue {
    private Node front; // Front of the queue
    private Node rear; // Rear of the queue

    // Constructor to initialize the queue
    public Queue() {
        this.front = null;
        this.rear = null;
    }

    // Method to enqueue an element into the queue
    public void enqueue(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            front = newNode;
            rear = newNode;
        } else {
            rear.next = newNode;
            rear = newNode;
        }
        System.out.println(data + " enqueued to queue");
    }

    // Method to dequeue an element from the queue
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue underflow");
            return -1; // Return a dummy value indicating queue underflow
        }
        int dequeued = front.data;
        front = front.next;
        if (front == null) {
            rear = null; // Reset rear if queue becomes empty after dequeue
        }
        return dequeued;
    }

    // Method to peek the front element of the queue
    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
            return -1; // Return a dummy value indicating queue is empty
        }
        return front.data;
    }

    // Method to check if the queue is empty
    public boolean isEmpty() {
        return front == null;
    }

    // Method to display all elements in the queue
    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
            return;
        }
        Node current = front;
        System.out.print("Queue: ");
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

// Main class to demonstrate queue operations
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue queue = new Queue();

        while (true) {
            System.out.println("\nQueue Operations:");
            System.out.println("1. Enqueue");
            System.out.println("2. Dequeue");
            System.out.println("3. Peek");
            System.out.println("4. Display");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            
            int choice = scanner.nextInt();
            int data;

            switch (choice) {
                case 1:
                    System.out.print("Enter data to enqueue: ");
                    data = scanner.nextInt();
                    queue.enqueue(data);
                    break;
                case 2:
                    data = queue.dequeue();
                    if (data != -1) {
                        System.out.println("Dequeued element: " + data);
                    }
                    break;
                case 3:
                    data = queue.peek();
                    if (data != -1) {
                        System.out.println("Front element: " + data);
                    }
                    break;
                case 4:
                    queue.display();
                    break;
                case 5:
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice");
            }
        }
    }
}
